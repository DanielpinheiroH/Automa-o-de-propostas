### 1️⃣ `requirements.txt`

```
tx
pandas
yagmail

```

---

### 2️⃣ `config.json`

```json
{
"email_remetente": "[jonatas.tavares@metropoles.com](mailto:jonatas.tavares@metropoles.com)",
"senha_app": "cfovrmwsqyugxwvv",
"assunto_email": "Confira nossa proposta personalizada!",
"corpo_email": "Olá {nome},\n\nSegue em anexo a nossa proposta especialmente preparada para você.\n\nAtenciosamente,\nCaio Bruno - Metrópoles",
"segmento": ["bets","crypto","diversos","saúde"]
}

//criar os inputs para receber os valores que o json irá consumir (o e-mail e senha poderão ser fixos, já o de assunto, corpo e segmento serão variáveis)
```

---

### 3️⃣ `main.py` (com auto detecção de segmentos)

```python
python

import pandas as pd
import yagmail
import os
import json
from datetime import datetime

# ======= Funções utilitárias =======

def criar_pasta_logs():
    if not os.path.exists('logs'):
        os.makedirs('logs')

def registrar_log(msg):
    data_str = datetime.now().strftime('%Y-%m-%d')
    log_path = f'logs/log_{data_str}.txt'
    with open(log_path, 'a', encoding='utf-8') as f:
        f.write(f"{datetime.now().strftime('%H:%M:%S')} - {msg}\n")

# ======= Início =======

# Criar pasta de logs se não existir
criar_pasta_logs()

# Carregar config
try:
    with open('config.json', 'r', encoding='utf-8') as f:
        config = json.load(f)
    registrar_log("✅ Configuração carregada com sucesso.")
except Exception as e:
    registrar_log(f"❌ Erro ao carregar config.json: {e}")
    exit()

# Configuração do yagmail
try:
    yag = yagmail.SMTP(user=config['email_remetente'], password=config['senha_app'])
    registrar_log("✅ Conexão com servidor de e-mail estabelecida.")
except Exception as e:
    registrar_log(f"❌ Erro na autenticação do e-mail: {e}")
    exit()

# === Auto detectar segmentos ===
segmentos = []
for filename in os.listdir('contatos'):
    if filename.endswith('.csv'):
        segmento_nome = filename.replace('.csv', '')
        segmentos.append(segmento_nome)

registrar_log(f"🔍 Segmentos detectados: {segmentos}")

# Loop pelos segmentos detectados
for segmento in segmentos:
    registrar_log(f"\n🔹 Iniciando processamento do segmento: {segmento}")

    # Carregar contatos
    path_contatos = f'contatos/{segmento}.csv'
    try:
        df = pd.read_csv(path_contatos)
    except Exception as e:
        registrar_log(f"❌ Erro ao ler CSV de contatos {segmento}: {e}")
        continue

    # Caminho da proposta
    path_proposta = f'propostas/{segmento}.pdf'
    if not os.path.exists(path_proposta):
        registrar_log(f"⚠️ Arquivo de proposta não encontrado: {path_proposta}")
        continue

    # Enviar emails
    for index, row in df.iterrows():
        nome = row.get('Nome', '').strip()
        email = row.get('Email', '').strip()

        if not nome or not email:
            registrar_log(f"⚠️ Contato inválido na linha {index+2}: Nome='{nome}', Email='{email}'")
            continue

        corpo_personalizado = config['corpo_email'].format(nome=nome)

        try:
            yag.send(
                to=email,
                subject=config['assunto_email'],
                contents=corpo_personalizado,
                attachments=path_proposta
            )
            registrar_log(f"✅ E-mail enviado para {nome} <{email}>")
        except Exception as e:
            registrar_log(f"❌ Erro ao enviar e-mail para {nome} <{email}>: {e}")

registrar_log("\n🚀 Processo concluído.")

```

---

### 4️⃣ `executar.bat`

```
b
@echo off
cd /d %~dp0
python main.py
pause

```

---

### 5️⃣ Exemplo de CSV para cada segmento (ex: `casa_de_apostas.csv`)

```
cs
Nome,Email
João Silva,joao@email.com
Maria Souza,maria@email.com

```

---

### Estrutura final esperada:

```
arduino

/automacao_envio_propostas/
│
├── contatos/
│   ├── casa_de_apostas.csv
│   ├── cripto.csv
│   ├── esportes.csv
│
├── propostas/
│   ├── casa_de_apostas.pdf
│   ├── cripto.pdf
│   ├── esportes.pdf
│
├── logs/                # será criada automaticamente
│
├── config.json
├── main.py
├── requirements.txt
└── executar.bat

```

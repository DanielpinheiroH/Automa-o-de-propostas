import tkinter as tk
from tkinter import messagebox, filedialog
import json
import os
import subprocess
import pandas as pd
import shutil

CONFIG_PATH = "config.json"
CONTATOS_DIR = "contatos"
SUBPASTAS = ["agencias", "clientes"]

# Cria as subpastas se não existirem
for subpasta in SUBPASTAS:
    os.makedirs(os.path.join(CONTATOS_DIR, subpasta), exist_ok=True)

# Função para carregar segmentos (não usado agora, mas pode servir se for implementar combobox)
def carregar_segmentos(tipo="agencias"):
    segmentos = []
    caminho_base = os.path.join(CONTATOS_DIR, tipo)
    if os.path.exists(caminho_base):
        for filename in os.listdir(caminho_base):
            if filename.endswith(".csv"):
                segmentos.append(filename.replace(".csv", ""))
    return segmentos

def abrir_tela_principal(config):
    root = tk.Tk()
    root.title("Envio de Propostas - Metrópoles")
    root.geometry("500x600")

    tk.Label(root, text="Assunto do e-mail:").pack(pady=(10, 0))
    entry_assunto = tk.Entry(root, width=60)
    entry_assunto.pack()

    tk.Label(root, text="Corpo do e-mail:").pack(pady=(10, 0))
    text_corpo = tk.Text(root, width=60, height=10)
    text_corpo.pack()

    tk.Label(root, text="E-mail em cópia (CC):").pack(pady=(10, 0))
    entry_cc = tk.Entry(root, width=60)
    entry_cc.pack()

    tk.Label(root, text="Tipo de envio:").pack(pady=(10, 0))
    tipo_envio_var = tk.StringVar(value="agencias")
    frame_tipo = tk.Frame(root)
    frame_tipo.pack()
    tk.Radiobutton(frame_tipo, text="Agências", variable=tipo_envio_var, value="agencias").pack(side="left", padx=5)
    tk.Radiobutton(frame_tipo, text="Clientes", variable=tipo_envio_var, value="clientes").pack(side="left", padx=5)

    tk.Label(root, text="Segmento (selecionado):").pack(pady=(10, 0))
    segmento_var = tk.StringVar()
    entry_segmento = tk.Entry(root, textvariable=segmento_var, width=40, state="readonly")
    entry_segmento.pack()

    def selecionar_arquivo():
        caminho = filedialog.askopenfilename(
            title="Selecionar arquivo de contatos",
            filetypes=[("Arquivos CSV/XLSX", "*.csv *.xlsx")]
        )
        if not caminho:
            return

        nome_segmento = os.path.splitext(os.path.basename(caminho))[0]
        subpasta = tipo_envio_var.get()
        pasta_destino = os.path.join(CONTATOS_DIR, subpasta)
        os.makedirs(pasta_destino, exist_ok=True)
        caminho_destino = os.path.join(pasta_destino, nome_segmento + ".csv")

        try:
            if caminho.endswith(".xlsx"):
                df = pd.read_excel(caminho)
                df.to_csv(caminho_destino, index=False)
            elif caminho.endswith(".csv"):
                shutil.copy(caminho, caminho_destino)
            else:
                messagebox.showerror("Erro", "Formato de arquivo inválido.")
                return

            # Lê o arquivo CSV final salvo
            df = pd.read_csv(caminho_destino)

            segmento_var.set(nome_segmento)

            # Preenche automaticamente o corpo do e-mail com os nomes
            if "nome" in df.columns:
                nomes = df["nome"].dropna().tolist()
                lista_nomes = "\n".join(f"- {nome}" for nome in nomes)
                texto_gerado = f"Prezados,\n\nSegue nossa proposta para:\n\n{lista_nomes}\n\nFico à disposição.\n"
                text_corpo.delete("1.0", tk.END)
                text_corpo.insert(tk.END, texto_gerado)
            else:
                messagebox.showwarning("Aviso", "O arquivo não possui a coluna 'nome'. Corpo não foi preenchido.")

            messagebox.showinfo("Sucesso", f"Arquivo carregado como '{nome_segmento}.csv'")

        except Exception as e:
            messagebox.showerror("Erro", f"Falha ao processar arquivo: {e}")

    tk.Button(root, text="Selecionar arquivo de contatos", command=selecionar_arquivo).pack(pady=10)

    def enviar_emails():
        assunto = entry_assunto.get()
        corpo = text_corpo.get("1.0", tk.END).strip()
        segmento = segmento_var.get()
        email_copia = entry_cc.get().strip()
        tipo_envio = tipo_envio_var.get()

        if not assunto or not corpo or not segmento:
            messagebox.showerror("Erro", "Por favor, preencha todos os campos.")
            return

        config["assunto_email"] = assunto
        config["corpo_email"] = corpo
        config["segmento"] = [segmento]
        config["email_copia"] = email_copia
        config["tipo_envio"] = tipo_envio

        try:
            with open(CONFIG_PATH, "w", encoding="utf-8") as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
        except Exception as e:
            messagebox.showerror("Erro", f"Falha ao salvar config.json: {e}")
            return

        try:
            subprocess.run(["python", "main.py"], check=True)
            messagebox.showinfo("Sucesso", "Processo concluído com sucesso!")
        except subprocess.CalledProcessError as e:
            messagebox.showerror("Erro", f"Erro ao executar main.py: {e}")

    tk.Button(root, text="ENVIAR E-MAILS", command=enviar_emails, bg="green", fg="white", font=("Arial", 12, "bold")).pack(pady=20)

    root.mainloop()

def abrir_tela_login():
    login = tk.Tk()
    login.title("Login - Metrópoles")
    login.geometry("400x250")

    tk.Label(login, text="E-mail do remetente:").pack(pady=(20, 0))
    entry_email = tk.Entry(login, width=40)
    entry_email.pack()

    tk.Label(login, text="Senha do app (Gmail):").pack(pady=(10, 0))
    entry_senha = tk.Entry(login, width=40, show="*")
    entry_senha.pack()

    def fazer_login():
        email = entry_email.get().strip()
        senha = entry_senha.get().strip()

        if not email or not senha:
            messagebox.showerror("Erro", "Preencha todos os campos.")
            return

        config = {
            "email_remetente": email,
            "senha_app": senha
        }

        try:
            with open(CONFIG_PATH, "w", encoding="utf-8") as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar config.json: {e}")
            return

        login.destroy()
        abrir_tela_principal(config)

    tk.Button(login, text="Login", command=fazer_login, bg="blue", fg="white", font=("Arial", 12, "bold")).pack(pady=20)
    login.mainloop()

if __name__ == "__main__":
    try:
        config = {}
        if os.path.exists(CONFIG_PATH):
            with open(CONFIG_PATH, "r", encoding="utf-8") as f:
                config = json.load(f)

        if config.get("email_remetente") and config.get("senha_app"):
            abrir_tela_principal(config)
        else:
            abrir_tela_login()

    except Exception as e:
        import traceback
        print("Erro ao iniciar a aplicação:")
        traceback.print_exc()
        input("Pressione ENTER para fechar...")
